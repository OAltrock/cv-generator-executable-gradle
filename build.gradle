plugins {
  id 'java'
  id 'application'
  id 'org.javamodularity.moduleplugin' version '1.8.12'
  id 'org.openjfx.javafxplugin' version '0.0.13'
  id 'org.beryx.jlink' version '3.0.1'
  id("io.freefair.lombok") version "8.6"
  }

group 'com.fdmgroup'
version '0.0.1'

repositories {
  mavenCentral()
}

ext {
  junitVersion = '5.10.0'
}

sourceCompatibility = '17'
targetCompatibility = '17'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

application {
  mainModule = 'com.fdmgroup.cvgeneratorgradle'
  mainClass = 'com.fdmgroup.cvgeneratorgradle.Main'
}

javafx {
  version = '21'
  modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
  implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')
  // https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml
  implementation group: 'org.apache.poi', name: 'poi-ooxml', version: '5.2.5'


  // https://mvnrepository.com/artifact/fr.opensagres.xdocreport/xdocreport
  implementation group: 'fr.opensagres.xdocreport', name: 'xdocreport', version: '2.0.4'

  // https://mvnrepository.com/artifact/javax.xml.bind/jaxb-api
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.4.0-b180830.0359'

  // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
  implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.17.0'

  testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
  testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
useJUnitPlatform()}


jlink {
  jpackage {
          if (org.gradle.internal.os.OperatingSystem.current().windows) {
              installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
              imageOptions += ['--icon', file('build/resources/main/com/fdmgroup/cvgeneratorgradle/images/FDM_Logo_Black_RGB.ico')]
          }
          if(org.gradle.internal.os.OperatingSystem.current().linux) {
               installerType='deb'
          }
          if(org.gradle.internal.os.OperatingSystem.current().macOsX) {
               installerType='dmg'
                    }
      }

  imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
  options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
  launcher {
    name = 'fdm-cv-generator-app'
  }
}

jlinkZip {
  group = 'distribution'
}
